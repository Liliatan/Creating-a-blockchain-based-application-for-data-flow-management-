import hashlib
import json
import time
import os

class Block:
    def __init__(self, index, timestamp, data, previous_hash, nonce=0):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.nonce = nonce
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        """Calculate the block's hash using SHA-256."""
        block_string = f"{self.index}{self.timestamp}{json.dumps(self.data)}{self.previous_hash}{self.nonce}"
        return hashlib.sha256(block_string.encode()).hexdigest()

class BlockchainDataFlow:
    def __init__(self, filename="dataflow_blockchain.json", difficulty=4):
        self.filename = filename
        self.difficulty = difficulty  # Number of leading zeros for PoW
        self.chain = []
        self.load_blockchain()
        if not self.chain:
            self.create_genesis_block()

    def create_genesis_block(self):
        """Create the first block in the chain."""
        genesis_block = Block(0, time.strftime("%Y-%m-%d %H:%M:%S"), {"data": "Genesis Block"}, "0")
        self.mine_block(genesis_block)
        self.chain.append(genesis_block)
        self.save_blockchain()

    def load_blockchain(self):
        """Load blockchain from JSON file."""
        if os.path.exists(self.filename):
            try:
                with open(self.filename, 'r') as file:
                    chain_data = json.load(file)
                    self.chain = [Block(**block) for block in chain_data]
                print("Blockchain loaded successfully.")
            except json.JSONDecodeError:
                print("Error loading blockchain. Starting with an empty chain.")
                self.chain = []
        else:
            print("No blockchain file found. Starting with an empty chain.")

    def save_blockchain(self):
        """Save blockchain to JSON file."""
        try:
            with open(self.filename, 'w') as file:
                json.dump([vars(block) for block in self.chain], file, indent=4)
            print("Blockchain saved successfully.")
        except Exception as e:
            print(f"Error saving blockchain: {e}")

    def mine_block(self, block):
        """Mine a block by finding a nonce that satisfies the difficulty."""
        target = "0" * self.difficulty
        while block.hash[:self.difficulty] != target:
            block.nonce += 1
            block.hash = block.calculate_hash()
        print(f"Block mined with nonce: {block.nonce}")

    def add_data(self, data):
        """Add a new data entry to the blockchain."""
        previous_block = self.chain[-1]
        new_block = Block(len(self.chain), time.strftime("%Y-%m-%d %H:%M:%S"), data, previous_block.hash)
        self.mine_block(new_block)
        self.chain.append(new_block)
        self.save_blockchain()
        print(f"Data added to blockchain: {data}")

    def verify_chain(self):
        """Verify the integrity of the blockchain."""
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i-1]
            if current_block.hash != current_block.calculate_hash():
                print(f"Invalid block at index {i}: Hash mismatch")
                return False
            if current_block.previous_hash != previous_block.hash:
                print(f"Invalid block at index {i}: Previous hash mismatch")
                return False
        print("Blockchain is valid.")
        return True

    def view_data(self):
        """Display all data entries in the blockchain."""
        if len(self.chain) <= 1:
            print("No data entries in the blockchain.")
            return
        print("\n--- Data Flow Records ---")
        for block in self.chain[1:]:  # Skip genesis block
            print(f"Block #{block.index}, Time: {block.timestamp}, Data: {block.data}, Hash: {block.hash[:10]}...")
        print("-----------------------")

def main():
    blockchain = BlockchainDataFlow(difficulty=4)

    while True:
        print("\n=== Blockchain Data Flow Manager ===")
        print("1. Add Data Entry")
        print("2. View All Data Entries")
        print("3. Verify Blockchain")
        print("4. Exit")
        choice = input("Enter your choice (1-4): ")

        if choice == "1":
            data_id = input("Enter data ID (e.g., sensor_id): ")
            data_value = input("Enter data value (e.g., temperature): ")
            data = {"data_id": data_id, "value": data_value}
            blockchain.add_data(data)

        elif choice == "2":
            blockchain.view_data()

        elif choice == "3":
            blockchain.verify_chain()

        elif choice == "4":
            print("Exiting data flow manager. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
